<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yitu&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-11-21T10:12:48.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>yitu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>你所不知道的NSDate和NSDateFormatter</title>
    <link href="http://yoursite.com/2016/11/20/%E4%BD%A0%E6%89%80%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84NSDate%E5%92%8CNSDateFormatter/"/>
    <id>http://yoursite.com/2016/11/20/你所不知道的NSDate和NSDateFormatter/</id>
    <published>2016-11-20T02:41:52.000Z</published>
    <updated>2016-11-21T10:12:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>关于NSDate和NSDateFormatter两个类相信大家也都用过，基本功能或许也都会用。但是我今天要讲一些细节问题，一些不遇到过就不会注意和发现的点。早在2013年做智能手表的时候，当时就对这两个类有过很重的使用。因为数据要标记生成数据的时间，数据同步到手机上之后，APP上显示的时间也要跟数据产生时间保持一致，这个保持一致就产生了一个时区的问题。假设用户在西八区带着智能手表产生了一些数据，用户回到东八区之后将数据同步到手机上，你按东八区时区将时间戳转化成时间，那么肯定是不正确的。</p>
<p>另外，由于日期从时间戳转化成NDate，是要用到NSDateFormatter这个类的。特别是智能手表里的数据是大量的，比如步数数据，一个小时的步数数据按2秒钟走一步算得话，一小时就会有3600/2 = 1800条数据。这1800数据在APP中展示的时候，是都要转成NSDate进行表示的，如果频繁初始化NSDateFormatter，是非常耗时的，因为NSDateFormatter对象本身初始化很慢~~~</p>
<p>这段经历，算是积累了一些在日期计算和格式转换之间的一些经验和心得。</p>
<p>2015年来到穷游之后，负责行程助手APP的开发工作。又跟日期打上交道了。这期间又发生了一些有趣的事情。<br><a id="more"></a></p>
<h1 id="行程助手上遇到的日期Bug"><a href="#行程助手上遇到的日期Bug" class="headerlink" title="行程助手上遇到的日期Bug"></a>行程助手上遇到的日期Bug</h1><h2 id="行程助手是什么"><a href="#行程助手是什么" class="headerlink" title="行程助手是什么"></a>行程助手是什么</h2><p>首先安利一下行程助手。【穷游行程助手成功入围App Store”2015年度精选”。App Store官方推荐的旅行必备工具。旨在为全球旅行者提供最美妙的境内外行程规划体验。】</p>
<h2 id="行程助手的日期处理策略"><a href="#行程助手的日期处理策略" class="headerlink" title="行程助手的日期处理策略"></a>行程助手的日期处理策略</h2><p>行程助手的用户，大多数都是要出境游的。出境，那么就意味着用户的手机时区会发生变化。为了保证用户在国内或者任何一个时区地点做行程的时候选择的行程出发时间假设是2016年10月30日，无论用户走到哪个国家，行程出发日期不会跟随时区进行变化，还是2016年10月30日。为此，我们Client端和Server端在进行日期交互的时候，统一通过2016-10-30的格式化字符串进行交互，不以传统的时间戳进行交互。</p>
<p>APP在从服务端拿到时间数据，类似2016-10-30的时候，在根据这个格式化的字符串进行相应的转化，予以展示。</p>
<h2 id="出现的bug"><a href="#出现的bug" class="headerlink" title="出现的bug"></a>出现的bug</h2><p>理论上，上述策略，是可以保证日期是不会有问题的。但是，不遂人愿。用户上报了一个bug，用户手机是罗马时区，他的行程开始时间是2016年10月30日，按道理来讲行程第二天应该显示2016年10月31日。可是他的第二天的行程日期还是2016年10月30日。</p>
<h1 id="Bug分析"><a href="#Bug分析" class="headerlink" title="Bug分析"></a>Bug分析</h1><h2 id="首先尝试bug复现"><a href="#首先尝试bug复现" class="headerlink" title="首先尝试bug复现"></a>首先尝试bug复现</h2><p>经过操作发现，并不是所有时区都会有问题，也不是某个时区肯定有问题。比如罗马时区，出发日期为2016年10月30日的时候就会有问题，如果出发日期改成出发日期为2016年11月5日就没有问题。这个。。。似乎就有点奇葩了啊</p>
<h2 id="梳理项目中日期显示流程"><a href="#梳理项目中日期显示流程" class="headerlink" title="梳理项目中日期显示流程"></a>梳理项目中日期显示流程</h2><p>上面讲到，APP从服务端拿到的行程的出发时间是2016-10-30格式的字符串，APP端经过如下转化，得出一个2016月10月30日，零时区时间的时间戳。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">//此时的[dict objectForKey:@&quot;start_time_format&quot;]即是@“2016-10-30”</div><div class="line">NSDate *startDate = [NSDate dateFromString:[dict objectForKey:@&quot;start_time_format&quot;] withFormat:@&quot;yyyy-MM-dd&quot;];</div><div class="line"></div><div class="line">object.start_time = [startDate timeIntervalSince1970];</div><div class="line"></div><div class="line">//NSDate category</div><div class="line">+ (NSDate *)dateFromString:(NSString *)string withFormat:(NSString *)format</div><div class="line">&#123;</div><div class="line">    NSDateFormatter *inputFormatter =[NSDateFormatter sharedSystemZoneDateFormatter];</div><div class="line">    [inputFormatter setDateFormat:format];</div><div class="line">    NSDate *date =[inputFormatter dateFromString:string];</div><div class="line">   </div><div class="line">   return date;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//NSDateFormatter category</div><div class="line">+ (NSDateFormatter *)sharedSystemZoneDateFormatter &#123;</div><div class="line">    static NSDateFormatter *sharedDateFormatter = nil;</div><div class="line">    </div><div class="line">    static dispatch_once_t onceToken;</div><div class="line">    dispatch_once(&amp;onceToken, ^&#123;</div><div class="line">        sharedDateFormatter = [[NSDateFormatter alloc] init];</div><div class="line">        [sharedDateFormatter setTimeZone:[NSTimeZone systemTimeZone]];</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    return sharedDateFormatter;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述代码中 </p>
<p>startDate = 2016-10-29 22:00:00 +0000</p>
<p>object.start_time = 1477778400</p>
<p>项目中计算行程其他天的日期是依据object.start_time计算的，代码如下：那么第二天的start_time = object.start_time + 24*3600,然后再讲时间戳使用[NSDate da]</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">NSTimeInterval *start_time = object.start_time + (index - 1) * 24 * 3600;//index表示第几天</div><div class="line">NSDate *date = [NSDate dateWithTimeIntervalSince1970:start_time];</div></pre></td></tr></table></figure>
<p>然后根据APP日期展示所要展示的日期格式，将NSDate 格式化成字符串,比如日期要显示成xxxx年xx月xx日</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"> NSString *dateStr = [date systemZoneStringWithFormat:@&quot;yyyy年MM月dd日&quot;];</div><div class="line"> </div><div class="line"> //NSDate category</div><div class="line"> - (NSString *)systemZoneStringWithFormat:(NSString *) format</div><div class="line">&#123;</div><div class="line">    NSDateFormatter *outputFormatter =[NSDateFormatter sharedSystemZoneDateFormatter];</div><div class="line">    [outputFormatter setDateFormat:format];</div><div class="line">   </div><div class="line">    NSString *timestamp_str = [outputFormatter stringFromDate:self];</div><div class="line">    </div><div class="line">    return timestamp_str;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//NSDateFormatter category</div><div class="line">+ (NSDateFormatter *)sharedSystemZoneDateFormatter &#123;</div><div class="line">    static NSDateFormatter *sharedDateFormatter = nil;</div><div class="line">    </div><div class="line">    static dispatch_once_t onceToken;</div><div class="line">    dispatch_once(&amp;onceToken, ^&#123;</div><div class="line">        sharedDateFormatter = [[NSDateFormatter alloc] init];</div><div class="line">        [sharedDateFormatter setTimeZone:[NSTimeZone systemTimeZone]];</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    return sharedDateFormatter;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>dateStr就是我们格式化出的字符串。</p>
<h2 id="流程中发现问题"><a href="#流程中发现问题" class="headerlink" title="流程中发现问题"></a>流程中发现问题</h2><p>在上述流程分析中，startDate = 2016-10-29 22:00:00 +0000引起了我的注意。我们都知道，罗马时区是东一区，那么@“2016年10月30日”按上述方法转化成NSDate的话应该是2016-10-29 23:00:00 +0000.差了一个小时。</p>
<p>为什么会差一个小时呢？？？</p>
<p>思考良久，突然脑子灵光一现，我记得之前看到过一个夏时制的问题，赶快google了一下。</p>
<h3 id="夏时制问题"><a href="#夏时制问题" class="headerlink" title="夏时制问题"></a>夏时制问题</h3><blockquote>
<p>夏时制，另译夏令时间（英语：Summer time），又称日光节约时制、日光节约时间（英语：Daylight saving time），是一种为节约能源而人为规定地方时间的制度，在这一制度实行期间所采用的统一时间称为“夏令时间”。一般在天亮较早的夏季人为将时间调快一小时，可以使人早起早睡，减少照明量，以充分利用光照资源，从而节约照明用电。各个采纳夏时制的国家具体规定不同。—维基百科，自由的百科全书</p>
</blockquote>
<p>而后，我查了一下罗马的确是实施夏时制的国家。并且它的2016年夏时制时间表为：</p>
<p>夏令时于当地标准时间 星期日, 27 三月 2016, 02:00 开始</p>
<p>夏令时于当地标准时间 星期日, 30 十月 2016, 03:00 结束</p>
<p>2016年10月30日，这个“神奇”的日期再度出现。</p>
<p>时间调快一个小时，反映在时区的影响上，就是在实行夏时制的时间段内，罗马的时区由东一区变成了东二区！！！那么一切问题都有答案了。</p>
<h2 id="答案浮出水面"><a href="#答案浮出水面" class="headerlink" title="答案浮出水面"></a>答案浮出水面</h2><p>由上日期显示流程，可得出前行程前天日期数据如下</p>
<table>
<thead>
<tr>
<th>行程第几天</th>
<th>日期时间戳</th>
<th>日期</th>
<th>格式化日期字符串</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>1477778400</td>
<td>2016-10-29 22:00:00 +0000</td>
<td>2016年10月30日</td>
</tr>
<tr>
<td>2</td>
<td>1477778400 + 24 * 3600</td>
<td>2016-10-30 22:00:00 +0000</td>
<td>2016年10月30日</td>
</tr>
<tr>
<td>3</td>
<td>1477778400 + 2 <em> 24 </em> 3600</td>
<td>2016-10-31 22:00:00 +0000</td>
<td>2016年10月31日</td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"> NSString *dateStr = [date systemZoneStringWithFormat:@&quot;yyyy年MM月dd日&quot;];</div><div class="line"> </div><div class="line"> //NSDate category</div><div class="line"> - (NSString *)systemZoneStringWithFormat:(NSString *)format</div><div class="line">&#123;</div><div class="line">    NSDateFormatter *outputFormatter =[NSDateFormatter sharedSystemZoneDateFormatter];</div><div class="line">    [outputFormatter setDateFormat:format];</div><div class="line">   </div><div class="line">    NSString *timestamp_str = [outputFormatter stringFromDate:self];</div><div class="line">    </div><div class="line">    return timestamp_str;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//NSDateFormatter category</div><div class="line">+ (NSDateFormatter *)sharedSystemZoneDateFormatter &#123;</div><div class="line">    static NSDateFormatter *sharedDateFormatter = nil;</div><div class="line">    </div><div class="line">    static dispatch_once_t onceToken;</div><div class="line">    dispatch_once(&amp;onceToken, ^&#123;</div><div class="line">        sharedDateFormatter = [[NSDateFormatter alloc] init];</div><div class="line">        [sharedDateFormatter setTimeZone:[NSTimeZone systemTimeZone]];</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    return sharedDateFormatter;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用[date systemZoneStringWithFormat:@”yyyy年MM月dd日”]方法，格式化字符串的时候，NSDateFormatter应该是考虑到夏时制的影响的。所以在2016-10-29 22:00:00 +0000格式化的时候是按照东二区时区进行格式化，格式化出的字符串结果应该是2016年10月30日 00:00;而在格式化2016-10-30 22:00:00 +0000的时候是按照东一区时区进行格式化，格式化出的字符串结果应该是2016年10月30日 23:00;</p>
<p>由此就会出现前面用户反应的那个bug，有两个2016年10月30日。</p>
<h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>上述流程中，在计算第几天的日期的时候，是直接加24*3600这个系数的，但是由于夏时制，时间拨快一个小时的影响，实际上这个系数是不准确的。</p>
<p>由此，计算日期基础上添加几天的方法应该如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/**</div><div class="line"> *  当前日期基础上添加几天(考虑是否是夏时制的问题)</div><div class="line"> *  @return 日期</div><div class="line"> */</div><div class="line"></div><div class="line">- (NSDate *)addDay:(NSInteger)day timeZone:(NSTimeZone *)timeZone &#123;</div><div class="line">    </div><div class="line">    NSTimeInterval interval =24*60*60;</div><div class="line">    NSDate *desDate = [self dateByAddingTimeInterval:day*interval];</div><div class="line">    </div><div class="line">    if (!timeZone) &#123;</div><div class="line">        return desDate;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    BOOL sourceDateIsDaylightSavingTime = [timeZone isDaylightSavingTimeForDate:self];</div><div class="line">    BOOL desDateIsDaylightSavingTime = [timeZone isDaylightSavingTimeForDate:desDate];</div><div class="line">    </div><div class="line">    if (sourceDateIsDaylightSavingTime &amp;&amp; desDateIsDaylightSavingTime) &#123;</div><div class="line">        return desDate;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    if (sourceDateIsDaylightSavingTime &amp;&amp; !desDateIsDaylightSavingTime) &#123;</div><div class="line">        desDate = [self dateByAddingTimeInterval:day*interval + 60*60];</div><div class="line">        return desDate;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    if (!sourceDateIsDaylightSavingTime &amp;&amp; desDateIsDaylightSavingTime) &#123;</div><div class="line">        desDate = [self dateByAddingTimeInterval:day*interval - 60*60];</div><div class="line">        return desDate;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return desDate;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样在计算出start_date的基础上，用此API计算之后每一天的日期就好。</p>
<h2 id="夏时制问题总结"><a href="#夏时制问题总结" class="headerlink" title="夏时制问题总结"></a>夏时制问题总结</h2><p>在做全球化的APP的时候，这个时间问题确实得考虑全面和周到。像这个夏时制的问题，也是一个坑。之前完全没有注意到。由此问题，我重新去观察系统API的时候，发现了一些有意思的地方，贴出来跟大家分享。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- (NSInteger)secondsFromGMTForDate:(NSDate *)aDate;</div><div class="line">@property (readonly) NSInteger secondsFromGMT;</div></pre></td></tr></table></figure>
<p>这两个API只差一个参数date,那么按照常规来讲，一个确定的NSTimeZone，它和GMT时区之间的时间间隔是固定的，为什么还有多一个参数date呢？这就是夏时制的问题啊，因为在某些日期的时候，由于正在实行夏时令，时区间隔会有所不一样。API诚不欺我啊。<br>这个在将0时区时间转化成当前时区的时候，推荐使用第一个API</p>
<ul>
<li>(NSInteger)secondsFromGMTForDate:(NSDate *)aDate</li>
</ul>
<p>譬如如下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">NSDate* date = [NSDate date];//得到0时区日期</div><div class="line">NSTimeZone *zone = [NSTimeZone systemTimeZone];</div><div class="line">NSInteger interval = [zone secondsFromGMTForDate:date];</div><div class="line">NSDate *localeDate = [date  dateByAddingTimeInterval: interval];</div></pre></td></tr></table></figure>
<h1 id="NSDateFormatter"><a href="#NSDateFormatter" class="headerlink" title="NSDateFormatter"></a>NSDateFormatter</h1><p>NSDateFormatter是一个很常用的类，用于格式化NSDate对象，支持本地化的信息。常规用法可能如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">NSDate *now = [NSDate date];</div><div class="line">NSDateFormatter *fmt = [[NSDateFormatter alloc] init];</div><div class="line">fmt.dateFormat = @&quot;yyyy-MM-dd HH:mm:ss&quot;;</div><div class="line">NSString *dateString = [fmt stringFromDate:now];</div><div class="line"></div><div class="line">NSLog(@&quot;%@&quot;, now);</div><div class="line">NSLog(@&quot;%@&quot;, dateString);</div><div class="line">打印输出：</div><div class="line">2016-11-20 08:34:38 +0000</div><div class="line"></div><div class="line">2016-11-20 16:34:38</div></pre></td></tr></table></figure>
<p>上述代码是在东八区时区环境下运行。由此可见，NSDate默认是零时区时间，NSDateFormatter默认时区是系统时区，将NSDate格式化成当前系统时间。但是如果有需求需要将2016-11-20 08:34:38 +0000就格式化成原来的样子，即2016-11-20 08:34:38。怎么办呢？那就需要将NSDateFormatter的时区设置成GMT zone</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">NSDate *now = [NSDate date];</div><div class="line">NSDateFormatter *fmt = [[NSDateFormatter alloc] init];</div><div class="line">fmt.dateFormat = @&quot;yyyy-MM-dd HH:mm:ss&quot;;</div><div class="line">fmt.timeZone = [NSTimeZone timeZoneWithAbbreviation:@&quot;GMT&quot;];</div><div class="line">NSString *dateString = [fmt stringFromDate:now];</div><div class="line"></div><div class="line">NSLog(@&quot;%@&quot;, now);</div><div class="line">NSLog(@&quot;%@&quot;, dateString);</div><div class="line">打印输出：</div><div class="line">2016-11-20 08:34:38 +0000</div><div class="line"></div><div class="line">2016-11-20 08:34:38</div></pre></td></tr></table></figure>
<p>由于NSDateFormatter初始化的非常耗时，如果频繁初始化的话，有时会造成程序卡顿。所以，如果程序日期转化频繁的话，建议将NSDateFormatter做成单例。比如下面这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">+ (NSDateFormatter *)sharedSystemZoneDateFormatter </div><div class="line">&#123;</div><div class="line">    static NSDateFormatter *sharedDateFormatter = nil;</div><div class="line">    </div><div class="line">    static dispatch_once_t onceToken;</div><div class="line">    dispatch_once(&amp;onceToken, ^&#123;</div><div class="line">        sharedDateFormatter = [[NSDateFormatter alloc] init];</div><div class="line">        [sharedDateFormatter setTimeZone:[NSTimeZone systemTimeZone]];</div><div class="line"></div><div class="line">    &#125;);</div><div class="line">    return sharedDateFormatter;</div><div class="line">&#125;</div><div class="line">//GMT时区DateFormatter</div><div class="line">+ (NSDateFormatter *)sharedGmtZoneDateFormatter</div><div class="line">&#123;</div><div class="line">    static NSDateFormatter *sharedGmtDateFormatter = nil;</div><div class="line">    </div><div class="line">    static dispatch_once_t onceToken;</div><div class="line">    dispatch_once(&amp;onceToken, ^&#123;</div><div class="line">        sharedGmtDateFormatter = [[NSDateFormatter alloc] init];</div><div class="line">        [sharedGmtDateFormatter setTimeZone:[NSTimeZone timeZoneWithAbbreviation:@&quot;GMT&quot;]];</div><div class="line">    &#125;);</div><div class="line">    return sharedGmtDateFormatter;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一个基于系统时区，一个基于GMT时区。</p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>NSDate和NSDateFormatter，在程序开发中会经常用到，系统的梳理一下，对于日后的开发工作，会是一个正向的促进作用。</p>
<p>关于NSDate的常用功能，我做了一个Category，会上传到Github上。稍后会在此贴出链接。</p>
<p><strong>原创文章，版权所有，转载请注明出处</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;关于NSDate和NSDateFormatter两个类相信大家也都用过，基本功能或许也都会用。但是我今天要讲一些细节问题，一些不遇到过就不会注意和发现的点。早在2013年做智能手表的时候，当时就对这两个类有过很重的使用。因为数据要标记生成数据的时间，数据同步到手机上之后，APP上显示的时间也要跟数据产生时间保持一致，这个保持一致就产生了一个时区的问题。假设用户在西八区带着智能手表产生了一些数据，用户回到东八区之后将数据同步到手机上，你按东八区时区将时间戳转化成时间，那么肯定是不正确的。&lt;/p&gt;
&lt;p&gt;另外，由于日期从时间戳转化成NDate，是要用到NSDateFormatter这个类的。特别是智能手表里的数据是大量的，比如步数数据，一个小时的步数数据按2秒钟走一步算得话，一小时就会有3600/2 = 1800条数据。这1800数据在APP中展示的时候，是都要转成NSDate进行表示的，如果频繁初始化NSDateFormatter，是非常耗时的，因为NSDateFormatter对象本身初始化很慢~~~&lt;/p&gt;
&lt;p&gt;这段经历，算是积累了一些在日期计算和格式转换之间的一些经验和心得。&lt;/p&gt;
&lt;p&gt;2015年来到穷游之后，负责行程助手APP的开发工作。又跟日期打上交道了。这期间又发生了一些有趣的事情。&lt;br&gt;
    
    </summary>
    
    
      <category term="Objective-C" scheme="http://yoursite.com/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>FBKVOController源码分析</title>
    <link href="http://yoursite.com/2016/11/02/FBKVOController%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2016/11/02/FBKVOController源码分析/</id>
    <published>2016-11-02T02:43:32.000Z</published>
    <updated>2016-11-02T03:52:59.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="PS：-此文为搬运篇-—逐渐将之前自己在其它地方写的文章搬运到这个博客上。"><a href="#PS：-此文为搬运篇-—逐渐将之前自己在其它地方写的文章搬运到这个博客上。" class="headerlink" title="PS：(此文为搬运篇)—逐渐将之前自己在其它地方写的文章搬运到这个博客上。"></a><code>PS：(此文为搬运篇)—逐渐将之前自己在其它地方写的文章搬运到这个博客上。</code></h4><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Key-Value Observing ，通过在特定对象之间监听一个特定的 keypath 的改变进行事件内省。例如：一个 ProgressView 可以观察 网络请求的 numberOfBytesRead 来更新它自己的 progress 属性。</p>
<p>这个方案已经被明确定义，获得框架级支持，可以方便地采用。开发人员不需要添加任何代码，不需要设计自己的观察者模型，直接可以在工程里使用。其次，KVO的架构非常的强大，可以很容易的支持多个观察者观察同一个属性，以及相关的值。</p>
<p>但是：<br>Apple原生KVO也有一些显而易见的缺点。</p>
<ol>
<li>添加和移除观察者要配对出现。移除一个未添加的观察者，程序会crash；重复添加观察者会造成回调方法多次调用，给程序造成逻辑上的混乱。</li>
<li>添加观察者，移除观察者，通知回调，三块儿代码过于分散。</li>
</ol>
<p>那么，有没有改良版的KVO呢？Facebook出品的FBKVOController是同类中我觉得最好用，且源码简单，设计感好。</p>
<p>ps:有人估计会提到ReactiveCocoa，我个人并不建议在项目中使用这么庞大一个类库，学习成本太大，很不利于开展团队协作以及后期维护。（个人之见，不同意的可以忽略）<br><a id="more"></a></p>
<h2 id="FBKVOController"><a href="#FBKVOController" class="headerlink" title="FBKVOController"></a>FBKVOController</h2><p>简单来说，FBKVOController是对KVO机制的一层封装，同时提供了线程安全的特性和并对如下这个臭名昭著的函数进行了封装，提供了干净的block的回调，避免了处理这个函数的逻辑散落的到处都是。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context</div></pre></td></tr></table></figure>
<h3 id="先看用法，再看源码"><a href="#先看用法，再看源码" class="headerlink" title="先看用法，再看源码"></a>先看用法，再看源码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// create KVO controller with observer</div><div class="line">FBKVOController *KVOController = [FBKVOController controllerWithObserver:self];</div><div class="line">self.KVOController = KVOController;</div><div class="line"></div><div class="line">// observe clock date property</div><div class="line">[self.KVOController observe:clock keyPath:@&quot;date&quot; options:NSKeyValueObservingOptionInitial|NSKeyValueObservingOptionNew block:^(ClockView *clockView, Clock *clock, NSDictionary *change) &#123;</div><div class="line"></div><div class="line">  // update clock view with new value</div><div class="line">  clockView.date = change[NSKeyValueChangeNewKey];</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>使用非常简单，提供了block回调。而且，并不需要考虑remove observer的事情。FBKVOController实现了“自释放”。关于“自释放”的概念会在文后予以详细解释。</p>
<p>下面就让我们进入到源码中，按照代码执行顺序进行梳理拆分，化整为零进行分析。</p>
<h2 id="源码之旅"><a href="#源码之旅" class="headerlink" title="源码之旅"></a>源码之旅</h2><h3 id="FBKVOController初始化"><a href="#FBKVOController初始化" class="headerlink" title="FBKVOController初始化"></a>FBKVOController初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">@implementation FBKVOController</div><div class="line">&#123;</div><div class="line">  NSMapTable&lt;id, NSMutableSet&lt;_FBKVOInfo *&gt; *&gt; *_objectInfosMap;</div><div class="line">  pthread_mutex_t _lock;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">+ (instancetype)controllerWithObserver:(nullable id)observer</div><div class="line">&#123;</div><div class="line">  return [[self alloc] initWithObserver:observer];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (instancetype)initWithObserver:(nullable id)observer retainObserved:(BOOL)retainObserved</div><div class="line">&#123;</div><div class="line">  self = [super init];</div><div class="line">  if (nil != self) &#123;</div><div class="line">    _observer = observer;</div><div class="line">    NSPointerFunctionsOptions keyOptions = retainObserved ? NSPointerFunctionsStrongMemory|NSPointerFunctionsObjectPointerPersonality : NSPointerFunctionsWeakMemory|NSPointerFunctionsObjectPointerPersonality;</div><div class="line">    _objectInfosMap = [[NSMapTable alloc] initWithKeyOptions:keyOptions valueOptions:NSPointerFunctionsStrongMemory|NSPointerFunctionsObjectPersonality capacity:0];</div><div class="line">    pthread_mutex_init(&amp;_lock, NULL);</div><div class="line">  &#125;</div><div class="line">  return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (instancetype)initWithObserver:(nullable id)observer</div><div class="line">&#123;</div><div class="line">  return [self initWithObserver:observer retainObserved:YES];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>首先我们可以看到，这个对象持有一个pthread_mutex_t及一个NSMapTable变量。这两个类型可能大家会有点不太熟悉。pthread_mutex_t是互斥锁，互斥锁通过确保一次只有一个线程执行代码的临界段来同步多个线程。互斥锁还可以保护单线程代码。NSMapTable，这里大家可以先理解为一个高级的NSDictionary，这里就不展开叙述了，文后会有详细介绍的链接。</li>
<li>在构造函数- (instancetype)initWithObserver:(nullable id)observer retainObserved:(BOOL)retainObserved中<ul>
<li>首先将传入的observer进行weak持有，这主要为了避免Retain Cycle。</li>
<li>初始化keyOptions。这一段的内容可能大家不太熟悉，NSPointerFunctionsOptions简单来     说就是定义NSMapTable中的key和value采用何种内存管理策略，包括strong强引用，weak弱引用以及copy（要支持NSCopying协议）</li>
<li>pthread_mutex_init(&amp;_lock, NULL)，初始化互斥锁</li>
</ul>
</li>
</ol>
<h3 id="添加observe"><a href="#添加observe" class="headerlink" title="添加observe"></a>添加observe</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (void)observe:(nullable id)object keyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options block:(FBKVONotificationBlock)block</div><div class="line">&#123;</div><div class="line">  NSAssert(0 != keyPath.length &amp;&amp; NULL != block, @&quot;missing required parameters observe:%@ keyPath:%@ block:%p&quot;, object, keyPath, block);</div><div class="line">  if (nil == object || 0 == keyPath.length || NULL == block) &#123;</div><div class="line">    return;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  // create info</div><div class="line">  _FBKVOInfo *info = [[_FBKVOInfo alloc] initWithController:self keyPath:keyPath options:options block:block];</div><div class="line"></div><div class="line">  // observe object with info</div><div class="line">  [self _observe:object info:info];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>对于传入的参数，构建一个内部的FBKVOInfo数据结构</li>
<li>调用[self _observe:object info:info];</li>
</ol>
<h4 id="接下来，我们来跟踪一下-self-observe-object-info-info-，内容如下"><a href="#接下来，我们来跟踪一下-self-observe-object-info-info-，内容如下" class="headerlink" title="接下来，我们来跟踪一下[self _observe:object info:info]，内容如下"></a>接下来，我们来跟踪一下[self _observe:object info:info]，内容如下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">- (void)_observe:(id)object info:(_FBKVOInfo *)info</div><div class="line">&#123;</div><div class="line">  // lock</div><div class="line">  pthread_mutex_lock(&amp;_lock);</div><div class="line"></div><div class="line">  NSMutableSet *infos = [_objectInfosMap objectForKey:object];</div><div class="line"></div><div class="line">  // check for info existence</div><div class="line">  _FBKVOInfo *existingInfo = [infos member:info];</div><div class="line">  if (nil != existingInfo) &#123;</div><div class="line">    // observation info already exists; do not observe it again</div><div class="line"></div><div class="line">    // unlock and return</div><div class="line">    pthread_mutex_unlock(&amp;_lock);</div><div class="line">    return;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  // lazilly create set of infos</div><div class="line">  if (nil == infos) &#123;</div><div class="line">    infos = [NSMutableSet set];</div><div class="line">    [_objectInfosMap setObject:infos forKey:object];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  // add info and oberve</div><div class="line">  [infos addObject:info];</div><div class="line"></div><div class="line">  // unlock prior to callout</div><div class="line">  pthread_mutex_unlock(&amp;_lock);</div><div class="line"></div><div class="line">  [[_FBKVOSharedController sharedController] observe:object info:info];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li><p>根据被观察的object获取其对应的infos set。这个主要作用在于避免多次对同一个keyPath添加多次观察。因为每调用一次addObserverForKeyPath就要有一个对应的removeObserverForKey。</p>
</li>
<li><p>从infos set判断是不是已经有了与此次info相同的观察。</p>
</li>
<li><p>如果以上都顺利通过，将观察的信息及关系注册到_FBKVOSharedController中。</p>
</li>
</ol>
<p>unObserve相关的任务逻辑大同小异，不再赘述。</p>
<h3 id="FBKVOSharedController的作用"><a href="#FBKVOSharedController的作用" class="headerlink" title="FBKVOSharedController的作用"></a>FBKVOSharedController的作用</h3><p>上述代码中有一个比较有意识的地方，[[_FBKVOSharedController sharedController] observe:object info:info];有一个单例类<br>_FBKVOSharedController。<br>将所有的观察信息统一交由一个FBKVOSharedController的单例进行维护。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">+ (instancetype)sharedController</div><div class="line">&#123;</div><div class="line">  static _FBKVOSharedController *_controller = nil;</div><div class="line">  static dispatch_once_t onceToken;</div><div class="line">  dispatch_once(&amp;onceToken, ^&#123;</div><div class="line">    _controller = [[_FBKVOSharedController alloc] init];</div><div class="line">  &#125;);</div><div class="line">  return _controller;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (instancetype)init</div><div class="line">&#123;</div><div class="line">  self = [super init];</div><div class="line">  if (nil != self) &#123;</div><div class="line">    NSHashTable *infos = [NSHashTable alloc];</div><div class="line">#ifdef __IPHONE_OS_VERSION_MIN_REQUIRED</div><div class="line">    _infos = [infos initWithOptions:NSPointerFunctionsWeakMemory|NSPointerFunctionsObjectPointerPersonality capacity:0];</div><div class="line">#elif defined(__MAC_OS_X_VERSION_MIN_REQUIRED)</div><div class="line">    if ([NSHashTable respondsToSelector:@selector(weakObjectsHashTable)]) &#123;</div><div class="line">      _infos = [infos initWithOptions:NSPointerFunctionsWeakMemory|NSPointerFunctionsObjectPointerPersonality capacity:0];</div><div class="line">    &#125; else &#123;</div><div class="line">      // silence deprecated warnings</div><div class="line">#pragma clang diagnostic push</div><div class="line">#pragma clang diagnostic ignored &quot;-Wdeprecated-declarations&quot;</div><div class="line">      _infos = [infos initWithOptions:NSPointerFunctionsZeroingWeakMemory|NSPointerFunctionsObjectPointerPersonality capacity:0];</div><div class="line">#pragma clang diagnostic pop</div><div class="line">    &#125;</div><div class="line"></div><div class="line">#endif</div><div class="line">    pthread_mutex_init(&amp;_mutex, NULL);</div><div class="line">  &#125;</div><div class="line">  return self;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>在单例的初始化方法中有一个NSHashTable，同NSMapTable一样，可能大家接触不是很多，我在后文会详细介绍，这里大家可以先理解为一个高级的NSSet。</li>
<li>NSPointerFunctionsZeroingWeakMemory简单来说就是定义NSHashTable中的元素采用何种内存管理策略</li>
</ol>
<p>于是，通过如下方法，我们像使用注册表一样将对KVOInfo注册。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">- (void)observe:(id)object info:(nullable _FBKVOInfo *)info</div><div class="line">&#123;</div><div class="line">  if (nil == info) &#123;</div><div class="line">    return;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  // register info</div><div class="line">  pthread_mutex_lock(&amp;_mutex);</div><div class="line">  [_infos addObject:info];</div><div class="line">  pthread_mutex_unlock(&amp;_mutex);</div><div class="line"></div><div class="line">  // add observer</div><div class="line">  [object addObserver:self forKeyPath:info-&gt;_keyPath options:info-&gt;_options context:(void *)info];</div><div class="line"></div><div class="line">  if (info-&gt;_state == _FBKVOInfoStateInitial) &#123;</div><div class="line">    info-&gt;_state = _FBKVOInfoStateObserving;</div><div class="line">  &#125; else if (info-&gt;_state == _FBKVOInfoStateNotObserving) &#123;</div><div class="line">    // this could happen when `NSKeyValueObservingOptionInitial` is one of the NSKeyValueObservingOptions,</div><div class="line">    // and the observer is unregistered within the callback block.</div><div class="line">    // at this time the object has been registered as an observer (in Foundation KVO),</div><div class="line">    // so we can safely unobserve it.</div><div class="line">    [object removeObserver:self forKeyPath:info-&gt;_keyPath context:(void *)info];</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>代表所有的观察信息都首先由FBKVOSharedController进行接受，随后进行转发。</li>
<li>对应的添加代码 有一个 移除代码，设计的相当细心啊</li>
</ol>
<h3 id="实现observeValueForKeyPath-ofObject-Change-context来接收通知。"><a href="#实现observeValueForKeyPath-ofObject-Change-context来接收通知。" class="headerlink" title="实现observeValueForKeyPath:ofObject:Change:context来接收通知。"></a>实现observeValueForKeyPath:ofObject:Change:context来接收通知。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">- (void)observeValueForKeyPath:(nullable NSString *)keyPath</div><div class="line">                      ofObject:(nullable id)object</div><div class="line">                        change:(nullable NSDictionary&lt;NSString *, id&gt; *)change</div><div class="line">                       context:(nullable void *)context</div><div class="line">&#123;</div><div class="line">  NSAssert(context, @&quot;missing context keyPath:%@ object:%@ change:%@&quot;, keyPath, object, change);</div><div class="line"></div><div class="line">  _FBKVOInfo *info;</div><div class="line"></div><div class="line">  &#123;</div><div class="line">    // lookup context in registered infos, taking out a strong reference only if it exists</div><div class="line">    pthread_mutex_lock(&amp;_mutex);</div><div class="line">    info = [_infos member:(__bridge id)context];</div><div class="line">    pthread_mutex_unlock(&amp;_mutex);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  if (nil != info) &#123;</div><div class="line"></div><div class="line">    // take strong reference to controller</div><div class="line">    FBKVOController *controller = info-&gt;_controller;</div><div class="line">    if (nil != controller) &#123;</div><div class="line"></div><div class="line">      // take strong reference to observer</div><div class="line">      id observer = controller.observer;</div><div class="line">      if (nil != observer) &#123;</div><div class="line"></div><div class="line">        // dispatch custom block or action, fall back to default action</div><div class="line">        if (info-&gt;_block) &#123;</div><div class="line">          NSDictionary&lt;NSString *, id&gt; *changeWithKeyPath = change;</div><div class="line">          // add the keyPath to the change dictionary for clarity when mulitple keyPaths are being observed</div><div class="line">          if (keyPath) &#123;</div><div class="line">            NSMutableDictionary&lt;NSString *, id&gt; *mChange = [NSMutableDictionary dictionaryWithObject:keyPath forKey:FBKVONotificationKeyPathKey];</div><div class="line">            [mChange addEntriesFromDictionary:change];</div><div class="line">            changeWithKeyPath = [mChange copy];</div><div class="line">          &#125;</div><div class="line">          info-&gt;_block(observer, object, changeWithKeyPath);</div><div class="line">        &#125; else if (info-&gt;_action) &#123;</div><div class="line">pragma clang diagnostic push</div><div class="line">pragma clang diagnostic ignored &quot;-Warc-performSelector-leaks&quot;</div><div class="line">          [observer performSelector:info-&gt;_action withObject:change withObject:object];</div><div class="line">pragma clang diagnostic pop</div><div class="line">        &#125; else &#123;</div><div class="line">          [observer observeValueForKeyPath:keyPath ofObject:object change:change context:info-&gt;_context];</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>根据context上下文获取对应的KVOInfo</li>
<li>判断当前info的observer和controller，是否仍然存在（因为之前我们采用的weak持有）</li>
<li>根据 info的block或者selector或者overwrite进行消息转发。</li>
</ol>
<p>FBKVOController整体的实现就介绍完了.FBKVOController给我的感觉是，局部有写代码我也会自己实现，但是作为一个整体，真心觉得还是一个字：服！</p>
<h2 id="填前面提到的坑"><a href="#填前面提到的坑" class="headerlink" title="填前面提到的坑"></a>填前面提到的坑</h2><h3 id="自释放"><a href="#自释放" class="headerlink" title="自释放"></a>自释放</h3><p>何为“自释放”？可以简单的理解为对象在生命周期结束后自动清理回收所有与其相关的资源或链接，这个清理不仅仅包括对象内存的回收，还包括对象解耦以及附属事件的清理等，比如定时器的自我停止、KVO对象的监听移除等。<br>那么，FBKVOController是如何做到自释放的？可以归纳为四个字——动态属性。其为观察者绑定动态属性self.KVOController，动态绑定的KVOController会随着观察者的释放而释放，KVOController在自己的dealloc函数中移除KVO监听，巧妙的将观察者的remove转移到其动态属性的dealloc函数中。</p>
<p>但是其还是有一定的局限性——对象无法监听自己的属性，如果你的代码是这样的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[self.KVOController observe:self keyPath:@&quot;date&quot; options:NSKeyValueObservingOptionNew block:^(NSDictionary *change) &#123;</div><div class="line">    // to do</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>很遗憾，循环引用的问题又出现，因为FBKVOController中的NSMapTable对象会retain key对象，具体代码如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[_objectInfosMap setObject:infos forKey:object];</div></pre></td></tr></table></figure>
<h3 id="NSHash​Table-amp-NSMap​Table"><a href="#NSHash​Table-amp-NSMap​Table" class="headerlink" title="NSHash​Table &amp; NSMap​Table"></a>NSHash​Table &amp; NSMap​Table</h3><p>有一篇文章讲的不错，直接贴链接吧<br><a href="http://nshipster.cn/nshashtable-and-nsmaptable/" target="_blank" rel="external">NSHash​Table &amp; NSMap​Table</a>,感谢原作者的贡献。后续有时间的话，我也会开一篇单独讲一讲。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>FBKVOController对于喜好使用kvo的工程师来说，是一个好的，精简的开发框架。源码优雅，可读性高，利于自己维护。</p>
<p>优点如下：</p>
<ol>
<li>提供了干净的block的回调，避免了处理这个函数的逻辑散落的到处都是。</li>
<li>不用担心remove问题，不用再在dealloc中写remove代码。当然，如果你需要在其他时机进行remove observer,你大可放心的remove，不会出现因为没有添加而crash的问题。</li>
</ol>
<p>缺点：</p>
<ol>
<li>对象无法监听自己的属性，否则会出现循环引用。但是这个case 很少见吧？哈哈~~~</li>
</ol>
<p>以上！</p>
<p><strong>原创文章，版权所有，转载请注明出处</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;PS：-此文为搬运篇-—逐渐将之前自己在其它地方写的文章搬运到这个博客上。&quot;&gt;&lt;a href=&quot;#PS：-此文为搬运篇-—逐渐将之前自己在其它地方写的文章搬运到这个博客上。&quot; class=&quot;headerlink&quot; title=&quot;PS：(此文为搬运篇)—逐渐将之前自己在其它地方写的文章搬运到这个博客上。&quot;&gt;&lt;/a&gt;&lt;code&gt;PS：(此文为搬运篇)—逐渐将之前自己在其它地方写的文章搬运到这个博客上。&lt;/code&gt;&lt;/h4&gt;&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;Key-Value Observing ，通过在特定对象之间监听一个特定的 keypath 的改变进行事件内省。例如：一个 ProgressView 可以观察 网络请求的 numberOfBytesRead 来更新它自己的 progress 属性。&lt;/p&gt;
&lt;p&gt;这个方案已经被明确定义，获得框架级支持，可以方便地采用。开发人员不需要添加任何代码，不需要设计自己的观察者模型，直接可以在工程里使用。其次，KVO的架构非常的强大，可以很容易的支持多个观察者观察同一个属性，以及相关的值。&lt;/p&gt;
&lt;p&gt;但是：&lt;br&gt;Apple原生KVO也有一些显而易见的缺点。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;添加和移除观察者要配对出现。移除一个未添加的观察者，程序会crash；重复添加观察者会造成回调方法多次调用，给程序造成逻辑上的混乱。&lt;/li&gt;
&lt;li&gt;添加观察者，移除观察者，通知回调，三块儿代码过于分散。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那么，有没有改良版的KVO呢？Facebook出品的FBKVOController是同类中我觉得最好用，且源码简单，设计感好。&lt;/p&gt;
&lt;p&gt;ps:有人估计会提到ReactiveCocoa，我个人并不建议在项目中使用这么庞大一个类库，学习成本太大，很不利于开展团队协作以及后期维护。（个人之见，不同意的可以忽略）&lt;br&gt;
    
    </summary>
    
    
      <category term="Objective-C" scheme="http://yoursite.com/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>为媳妇儿写了段VBA</title>
    <link href="http://yoursite.com/2016/10/27/%E4%B8%BA%E5%AA%B3%E5%A6%87%E5%84%BF%E5%86%99VBA/"/>
    <id>http://yoursite.com/2016/10/27/为媳妇儿写VBA/</id>
    <published>2016-10-27T09:25:16.000Z</published>
    <updated>2016-11-02T03:48:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>我家媳妇儿（以下简称领导）是做金融行业数据分析相关工作，每天都需要跟海量的Excel数据打交道。昨天，非得让我给写一个VBA程序，实现一个可以自动处理数据的Case.语气强硬：你不是“扛把子”吗，“扛把子”程序员不是什么都会写吗？呃。。。话说“扛把子”程序员这个称号如何而来。。。我竟无言以对。没办法，硬着头皮撸vba吧，不能失掉自己在领导心目中伟岸的形象~~</p>
<h2 id="甩起膀子-干活吧"><a href="#甩起膀子-干活吧" class="headerlink" title="甩起膀子 干活吧"></a>甩起膀子 干活吧</h2><p>在kindle上搜索到一本《别怕，ExcelVBA其实很简单》，看评价挺高，下单，购买。并没有急于去看书，根据领导的业务要求，理了一下思路。需要把400多个Excel工作簿里某个工作表的所有品类的每个品类的GMV算出来，并把算出的结果–放到一个新的Excel文件中，方便领导对结果进行处理分析。</p>
<p>业务逻辑理顺了，那就一步一步堆代码吧。文件夹遍历，工作簿操作，工作表操作，数据类型，控制语句重点是循环，单元格操作。重点就这些。领导要的比较急，我也就非常之时用非常之法了。</p>
<p>还好，不辱使命，凌晨1点终于搞定。</p>
<p>交付领导测试，完美运行。</p>
<p>PS:今天领导说，非常好用，大大提高了工作效率。O(∩_∩)O哈哈~<br><a id="more"></a></p>
<h2 id="代码记录"><a href="#代码记录" class="headerlink" title="代码记录"></a>代码记录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">Sub AutoCalculate()</div><div class="line">Dim path As String</div><div class="line">Dim FileName As String</div><div class="line">Dim LastCell As Range</div><div class="line">Dim Wkb As Workbook</div><div class="line">Dim WS As Worksheet</div><div class="line">Dim ThisWB As String</div><div class="line"></div><div class="line">Dim MyDir As String</div><div class="line">MyDir = ThisWorkbook.path &amp; &quot;\&quot;</div><div class="line"></div><div class="line">Dim thisWCRowsCount As Integer</div><div class="line">thisWCRowsCount = 0</div><div class="line"></div><div class="line">ThisWB = ThisWorkbook.Name</div><div class="line">Application.EnableEvents = False</div><div class="line">Application.ScreenUpdating = False</div><div class="line">path = MyDir</div><div class="line">FileName = Dir(path &amp; &quot;\*.xlsx&quot;, vbNormal)</div><div class="line"></div><div class="line">Do Until FileName = &quot;&quot;</div><div class="line"></div><div class="line">If FileName &lt;&gt; ThisWB Then</div><div class="line">Set Wkb = Workbooks.Open(FileName:=path &amp; &quot;\&quot; &amp; FileName)</div><div class="line">For Each WS In Wkb.Worksheets</div><div class="line">Set LastCell = WS.Cells.SpecialCells(xlCellTypeLastCell)</div><div class="line"></div><div class="line">If LastCell.Value = &quot;&quot; And LastCell.Address = Range(&quot;$A$1&quot;).Address Then</div><div class="line"></div><div class="line">Else</div><div class="line"></div><div class="line">If WS.Name = &quot;品牌热门排行&quot; Then</div><div class="line"></div><div class="line">&apos;遍历每一行</div><div class="line">Dim i, j</div><div class="line">Dim sum</div><div class="line"></div><div class="line">nowRow = 1</div><div class="line">sum = WS.Cells(1, 6).Value</div><div class="line">i = 1</div><div class="line">j = WS.UsedRange.Rows.Count</div><div class="line"></div><div class="line">For i = 1 To j - 1</div><div class="line"></div><div class="line">     If WS.Cells(i + 1, 3).Value = WS.Cells(i, 3).Value Then</div><div class="line"></div><div class="line">        sum = sum + WS.Cells(i + 1, 6).Value</div><div class="line"></div><div class="line">     Else</div><div class="line"></div><div class="line">        thisWCRowsCount = thisWCRowsCount + 1</div><div class="line">        ThisWorkbook.Sheets(1).Cells(thisWCRowsCount, 3).Value = sum</div><div class="line">        ThisWorkbook.Sheets(1).Cells(thisWCRowsCount, 2).Value = WS.Cells(i, 3).Value</div><div class="line">        ThisWorkbook.Sheets(1).Cells(thisWCRowsCount, 1).Value = WS.Cells(i, 1).Value</div><div class="line">        sum = WS.Cells(i + 1, 6).Value</div><div class="line">     End If</div><div class="line"></div><div class="line">        If i + 1 = j Then</div><div class="line">        thisWCRowsCount = thisWCRowsCount + 1</div><div class="line">        ThisWorkbook.Sheets(1).Cells(thisWCRowsCount, 3).Value = sum</div><div class="line">        ThisWorkbook.Sheets(1).Cells(thisWCRowsCount, 2).Value = WS.Cells(i + 1, 3).Value</div><div class="line">        ThisWorkbook.Sheets(1).Cells(thisWCRowsCount, 1).Value = WS.Cells(i + 1, 1).Value</div><div class="line">        End If</div><div class="line">Next</div><div class="line">&apos;以上为遍历每一行代码</div><div class="line">End If</div><div class="line"></div><div class="line">End If</div><div class="line">Next WS</div><div class="line"></div><div class="line">Wkb.Close False</div><div class="line">End If</div><div class="line"></div><div class="line">FileName = Dir()</div><div class="line">Loop</div><div class="line"></div><div class="line">Application.EnableEvents = True</div><div class="line">Application.ScreenUpdating = True</div><div class="line"></div><div class="line">Set Wkb = Nothing</div><div class="line">Set LastCell = Nothing</div><div class="line">End Sub</div></pre></td></tr></table></figure>
<h2 id="新技能Get"><a href="#新技能Get" class="headerlink" title="新技能Get"></a>新技能Get</h2><p>接触一门新语言，一晚上写出一个VBA小程序，解决一个特定Case。收获更多的是对学习思路和方法的反思。任何一门编程语言，纸上谈兵，纯理论的学习，见效非常慢，也是不科学的。唯有放到实际生产中，在实践中学习，方能提高学习效率。任何的学习，都理应如此。</p>
<h2 id="写在文后"><a href="#写在文后" class="headerlink" title="写在文后"></a>写在文后</h2><p>此文仅仅是自写自看，也算是开一个深入学习VBA的口子吧。以后肯定还会结合领导的需求写出其他的小程序，代码也会存放在这里。另外在VBA程序优化和抽象上会作进一步处理，目标是能为领导的日常工作建立一套模型，实现尽可能的办公自动化。最浪漫的事莫过于此吧~~   O(∩_∩)O</p>
<p>以上。</p>
<p><strong>原创文章，版权所有，转载请注明出处</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;我家媳妇儿（以下简称领导）是做金融行业数据分析相关工作，每天都需要跟海量的Excel数据打交道。昨天，非得让我给写一个VBA程序，实现一个可以自动处理数据的Case.语气强硬：你不是“扛把子”吗，“扛把子”程序员不是什么都会写吗？呃。。。话说“扛把子”程序员这个称号如何而来。。。我竟无言以对。没办法，硬着头皮撸vba吧，不能失掉自己在领导心目中伟岸的形象~~&lt;/p&gt;
&lt;h2 id=&quot;甩起膀子-干活吧&quot;&gt;&lt;a href=&quot;#甩起膀子-干活吧&quot; class=&quot;headerlink&quot; title=&quot;甩起膀子 干活吧&quot;&gt;&lt;/a&gt;甩起膀子 干活吧&lt;/h2&gt;&lt;p&gt;在kindle上搜索到一本《别怕，ExcelVBA其实很简单》，看评价挺高，下单，购买。并没有急于去看书，根据领导的业务要求，理了一下思路。需要把400多个Excel工作簿里某个工作表的所有品类的每个品类的GMV算出来，并把算出的结果–放到一个新的Excel文件中，方便领导对结果进行处理分析。&lt;/p&gt;
&lt;p&gt;业务逻辑理顺了，那就一步一步堆代码吧。文件夹遍历，工作簿操作，工作表操作，数据类型，控制语句重点是循环，单元格操作。重点就这些。领导要的比较急，我也就非常之时用非常之法了。&lt;/p&gt;
&lt;p&gt;还好，不辱使命，凌晨1点终于搞定。&lt;/p&gt;
&lt;p&gt;交付领导测试，完美运行。&lt;/p&gt;
&lt;p&gt;PS:今天领导说，非常好用，大大提高了工作效率。O(∩_∩)O哈哈~&lt;br&gt;
    
    </summary>
    
    
      <category term="VBA" scheme="http://yoursite.com/tags/VBA/"/>
    
  </entry>
  
  <entry>
    <title>Swift Optional 易疑惑</title>
    <link href="http://yoursite.com/2016/10/18/swift-Optional-%E5%BB%B6%E4%BC%B8%E5%BC%80%E6%9D%A5/"/>
    <id>http://yoursite.com/2016/10/18/swift-Optional-延伸开来/</id>
    <published>2016-10-18T07:12:08.000Z</published>
    <updated>2016-11-02T03:49:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近有朋友咨询过多次关于swift中? ! ?? as? as! Any AnyObject这些符号到底表示什么意思，如何使用。对于初学者，在看swift代码时，对满屏的这些符号，表示很晕。借此机会，我把自己对此的理解记录于此。</p>
<p>话说一切要先以可选类型Optional说起~~<br><a id="more"></a></p>
<h2 id="一-可选类型Optional"><a href="#一-可选类型Optional" class="headerlink" title="一.可选类型Optional"></a>一.可选类型Optional</h2><h3 id="1-1Optional初识"><a href="#1-1Optional初识" class="headerlink" title="1.1Optional初识"></a>1.1Optional初识</h3><p>C 和 Objective-C 中并沒有 optional这个概念。可选类型类似于Objective-C中指针的nil值，但是nil只对类(class)有用，指对象不存在，对于结构体，基本的 C 数据类型或者枚举类型不起作用。对于这些类型，Objective-C 方法一般返回一个特殊值（比如NSNotFound）来表示值不存在。但是，Swift 的 optional 可以表示任意类型的值不存在。任何类型的可选类型都能赋值为 nil，而不仅限于对象类型。</p>
<p>举个例子<br>Swift 的String 有一個叫做toInt的方法，作用是将一個String值转换成一个Int值。然而，并不是所有的字符串都可以转换成一个整數。字符串”123”可以被转换成数字123，但是字符串”hello, world”不行。</p>
<p>如下代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let possibleNumber = &quot;123&quot;</div><div class="line">let convertedNumber = possibleNumber.toInt()</div><div class="line">// convertedNumber 类型是 &quot;Int?&quot;， 也就是 &quot;optional Int&quot;</div></pre></td></tr></table></figure>
<p>一個 optional Int写成Int?而不是Int。问号暗示包含的值是 optional 类型，也就是说可能是一个Int值也可能不包含值，也就是nil。</p>
<p>对于一个不确定有没有值的变量我们可以定义成Optional.定义一个可选类型有两种方法。</p>
<ul>
<li><p>第一种方式<br>var str: Optional<string> = nil</string></p>
</li>
<li><p>第二种方式<br>var str:String? = nil (推荐此种写法)</p>
</li>
</ul>
<h2 id="那么，到此-在类型后面，可以表示定义一个可选类型变量或者常亮"><a href="#那么，到此-在类型后面，可以表示定义一个可选类型变量或者常亮" class="headerlink" title="那么，到此,?在类型后面，可以表示定义一个可选类型变量或者常亮"></a><code>那么，到此,?在类型后面，可以表示定义一个可选类型变量或者常亮</code></h2><h3 id="1-2Optional的使用"><a href="#1-2Optional的使用" class="headerlink" title="1.2Optional的使用"></a>1.2Optional的使用</h3><h4 id="1-2-1强制解包"><a href="#1-2-1强制解包" class="headerlink" title="1.2.1强制解包"></a>1.2.1强制解包</h4><p>上面讲到了如何定义可选类型，那么现在有一个可选类型的变量，如何使用这个变量呢？这里要引出一个解包的概念。</p>
<p>假设现在有一个变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var str:String? = &quot;hello&quot;</div></pre></td></tr></table></figure>
<p>如果我们使用str,是不能直接使用str的。一定要进行解包操作。<br>如何解包呢？只需要在变量或者常量后面加上”!”即可。</p>
<p>如下两行代码的输出结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">print(str)//输出：打印出来的结果是Optional&lt;&quot;hello&quot;&gt; : 表示的意思是:str是一个可选类型,并且可选类型中存储的是一个hello的字符串</div><div class="line">print(str!)//输出：“hello”</div></pre></td></tr></table></figure>
<h2 id="那么，到此-在变量-常亮后面，表示对Optional做强制解包操作。"><a href="#那么，到此-在变量-常亮后面，表示对Optional做强制解包操作。" class="headerlink" title="那么，到此,!在变量/常亮后面，表示对Optional做强制解包操作。"></a><code>那么，到此,!在变量/常亮后面，表示对Optional做强制解包操作。</code></h2><h4 id="1-2-2还有一种解包方式optional-binding"><a href="#1-2-2还有一种解包方式optional-binding" class="headerlink" title="1.2.2还有一种解包方式optional binding"></a>1.2.2还有一种解包方式optional binding</h4><p>在使用可选类型取值时, 通过感叹号!来取值,这个操作我们常常称之为”强制解包”<br>强制解包的意义是告诉Xcode该变量或者常量是一定有值的, 如果强制解包一个没有值的可选类型,程序会直接crash, 所以说强制解包是一个非常危险的操作.</p>
<p>使用if let进行可选绑定（optional binding）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var str:String? </div><div class="line">str = &quot;hello&quot;</div><div class="line">if let temp = str &#123;</div><div class="line">    print(temp)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>判断可选类型str是否有值, 如果有值,则就会执行{}中的代码。<br>换句话说: 如果可选类型有值则系统内部就会对可选类型进行解包,并且将值赋值给temp<br>之后就能通过temp进行访问可选类型</p>
<h2 id="二-类型检查和类型转换-is-as-as-as！"><a href="#二-类型检查和类型转换-is-as-as-as！" class="headerlink" title="二.类型检查和类型转换 is as as? as！"></a>二.类型检查和类型转换 is as as? as！</h2><p>在Swift中，通常使用is和as操作符来实现类型检查和转换。下面通过样例来演示使用方法，首先定义几个类。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">class MediaItem &#123;</div><div class="line">    var name: String</div><div class="line">    init(name: String) &#123;</div><div class="line">        self.name = name</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">class Movie: MediaItem &#123;</div><div class="line">    var director: String</div><div class="line">    init(name: String, director: String) &#123;</div><div class="line">        self.director = director</div><div class="line">        super.init(name: name)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Movie: MediaItem &#123;</div><div class="line">    var director: String</div><div class="line">    init(name: String, director: String) &#123;</div><div class="line">        self.director = director</div><div class="line">        super.init(name: name)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">let library = [</div><div class="line">    Movie(name: &quot;Casablanca&quot;, director: &quot;Michael Curtiz&quot;),</div><div class="line">    Song(name: &quot;Blue Suede Shoes&quot;, artist: &quot;Elvis Presley&quot;),</div><div class="line">    Movie(name: &quot;Citizen Kane&quot;, director: &quot;Orson Welles&quot;),</div><div class="line">    Song(name: &quot;The One And Only&quot;, artist: &quot;Chesney Hawkes&quot;),</div><div class="line">    Song(name: &quot;Never Gonna Give You Up&quot;, artist: &quot;Rick Astley&quot;)</div><div class="line">]</div></pre></td></tr></table></figure>
<h3 id="2-1-使用-is-做类型检查"><a href="#2-1-使用-is-做类型检查" class="headerlink" title="2.1 使用 is 做类型检查"></a>2.1 使用 is 做类型检查</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var movieCount = 0</div><div class="line">var songCount = 0</div><div class="line"></div><div class="line">for item in library &#123;</div><div class="line">    if item is Movie &#123;</div><div class="line">        ++movieCount</div><div class="line">    &#125; else if item is Song &#123;</div><div class="line">        ++songCount</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">println(&quot;Media library contains \(movieCount) movies and \(songCount) songs&quot;)</div><div class="line">// prints &quot;Media library contains 2 movies and 3 songs&quot;</div></pre></td></tr></table></figure>
<p>示例迭代了数组library 中的所有元素。循环结束后，movieCount 和 songCount的值就是被找到属于各自的类型的实例数量。</p>
<h3 id="2-2-使用-as-做类型转换"><a href="#2-2-使用-as-做类型转换" class="headerlink" title="2.2 使用 as 做类型转换"></a>2.2 使用 as 做类型转换</h3><p>看代码说话,承接上部分代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">let movie: MediaItem = Movie(name: &quot;Casablanca&quot;, director: &quot;Michael Curtiz&quot;);</div><div class="line">        </div><div class="line">        movie as Movie//&quot;&apos;MediaItem is not convertible to &apos;Movie&apos;;</div><div class="line">				// did you mean to use &apos;as!&apos; to force downcast?&quot;</div><div class="line"></div><div class="line">        movie as MediaItem//可以</div><div class="line"></div><div class="line">        movie as! Movie//可以</div><div class="line">        </div><div class="line">        movie as? Movie//可以</div><div class="line">        </div><div class="line">        movie as? Song//可以，返回nil</div><div class="line">        </div><div class="line">        movie as！Song//不可以，crash</div></pre></td></tr></table></figure>
<h4 id="那么，到此-可总结出"><a href="#那么，到此-可总结出" class="headerlink" title="那么，到此,可总结出"></a>那么，到此,可总结出</h4><ul>
<li>is来检查一个实例是否特定子类别</li>
<li>as 用作向上转型（upcast）</li>
<li>as? 可选形式的型別检查总是返回一个（optional value），并且如果向下转是不可能的，可选值将是 nil 。这使你能够检查向下转型是否成功。ps:成功的话返回可选类型值（optional），需要我们拆包使用。（见下方代码）</li>
<li>as! 只有你可以确定向下转型一定会成功时，才使用强制形式。当你视图向下转型为一个不正確的类型时，强制形式的类型检查会引发一个执行时错误。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">for item in library &#123;</div><div class="line">    if let movie = item as? Movie &#123; //optional binding解包！！！！！！！！！！！！</div><div class="line">        println(&quot;Movie: &apos;\(movie.name)&apos;, dir. \(movie.director)&quot;)</div><div class="line">    &#125; else if let song = item as? Song &#123;</div><div class="line">        println(&quot;Song: &apos;\(song.name)&apos;, by \(song.artist)&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="三-双问号"><a href="#三-双问号" class="headerlink" title="三.双问号 ??"></a>三.双问号 ??</h2><p>对于不期望某个optional值为nil时func返回nil 或者 因为其值为nil而停止了后续业务的情况下，我们可以用”??”在optionalValue为nil时做赋值保险操作（“??”操作后返回值为非optional）</p>
<p>用法： newValue = optionalValue ?? value<br>若optionalValue非nil时，newValue的值为optionalValue的值，若optionalValue为nil时，newValue的值为value的值</p>
<h2 id="四-Any-AnyObject"><a href="#四-Any-AnyObject" class="headerlink" title="四.Any AnyObject"></a>四.Any AnyObject</h2><p>简而言之</p>
<p>AnyObject 可以代表任何 class 类型的实例</p>
<p>Any 可以表示任意类型，甚至包括方法 (func) 类型</p>
<p>AnyObject 类似 Objective-C 中的 id ，但其实并不一样。在 Swift 中编译器不仅不会对 AnyObject 实例的方法调用做出检查，甚至对于 AnyObject 的所有方法调用都会返回 Optional 的结果。这虽然是符合 Objective-C 中的理念的，但是在 Swift 环境下使用起来就非常麻烦，也很危险。应该选择的做法是在使用时先确定 AnyObject 真正的类型并进行转换以后再进行调用。</p>
<p>假设原来的某个 API 返回的是一个 id，那么在 Swift 中现在就将被映射为 AnyObject? (因为 id 是可以指向 nil 的，所以在这里我们需要一个 Optional 的版本)，虽然我们知道调用来说应该是没问题的，但是我们依然最好这样写：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">func someMethod() -&gt; AnyObject? &#123;     </div><div class="line"> // ...    </div><div class="line"> // 返回一个 AnyObject?，等价于在 Objective-C 中返回一个 id     </div><div class="line"> return result </div><div class="line"> &#125; </div><div class="line"> let anyObject: AnyObject? = SomeClass.someMethod()</div><div class="line">  if let someInstance = anyObject as? SomeRealClass &#123;    </div><div class="line">    // ...    </div><div class="line">    // 这里我们拿到了具体 SomeRealClass 的实例     </div><div class="line">    someInstance.funcOfSomeRealClass() </div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h2 id="五-关于？-！其实还有另外一种用法"><a href="#五-关于？-！其实还有另外一种用法" class="headerlink" title="五.关于？ ！其实还有另外一种用法"></a>五.关于？ ！其实还有另外一种用法</h2><h3 id="5-1-？可用于可选链（Optional-Chaining）中"><a href="#5-1-？可用于可选链（Optional-Chaining）中" class="headerlink" title="5.1 ？可用于可选链（Optional Chaining）中"></a>5.1 ？可用于可选链（Optional Chaining）中</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">class Person &#123;</div><div class="line">    var residence: Residence?</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Residence &#123;</div><div class="line">    var numberOfRooms = 1</div><div class="line">&#125;</div><div class="line"></div><div class="line">let john = Person()</div><div class="line"></div><div class="line">if let roomCount = john.residence?.numberOfRooms &#123;</div><div class="line">    println(&quot;John&apos;s residence has \(roomCount) room(s).&quot;)</div><div class="line">&#125; else &#123;</div><div class="line">    println(&quot;Unable to retrieve the number of rooms.&quot;)</div><div class="line">&#125;</div><div class="line">// 列印 &quot;Unable to retrieve the number of rooms.</div></pre></td></tr></table></figure>
<p>这告诉 Swift 来链接可选residence?属性，如果residence存在则返回回numberOfRooms的值。</p>
<p>因为这种尝试获取numberOfRooms的操作有可能失失败，可选链会返回Int?类型值。当residence是nil的時候（上例），无法存取numberOfRooms。</p>
<p>要注意的是，即使numberOfRooms是非可选Int（Int?）只要是通过可选链的请求就意味着numberOfRooms总是回传一个Int?而不是Int。</p>
<h3 id="5-2-！可用于隐式解包中"><a href="#5-2-！可用于隐式解包中" class="headerlink" title="5.2 ！可用于隐式解包中"></a>5.2 ！可用于隐式解包中</h3><p>相对于普通的 Optional 值，在 Swift 中我们还有一种特殊的 Optional，在对它的成员或者方法进行访问时，编译器会帮助我们自动进行解包，这就是 ImplicitlyUnwrappedOptional。在声明的时候，我们可以通过在类型后加上一个感叹号 (!) 这个语法糖来告诉编译器我们需要一个可以隐式解包的 Optional 值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var maybeObject: MyClass!</div></pre></td></tr></table></figure>
<p>在使用的时候不用次使用的时候 在变量/常量后面加！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var maybeObject: MyClass! = MyClass()</div><div class="line">maybeObject.foo()</div></pre></td></tr></table></figure>
<p>TIP:隐式解包不意味着 “这个变量不会是 nil，你可以放心使用” 这种暗示，只能说 Swift 通过这个特性给了我们一种简便但是危险的使用方式罢了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.?使用场景"></a>1.?使用场景</h3><ul>
<li>声明Optional变量 </li>
<li>用在可选链（Optional Chaining）中,用来判断是否响应后面的操作 </li>
</ul>
<h3 id="2-使用场景"><a href="#2-使用场景" class="headerlink" title="2.!使用场景"></a>2.!使用场景</h3><ul>
<li>对Optional做强制解包</li>
<li>声明 隐式解包的可选类型的时候, 一般用于类中的属性</li>
</ul>
<h3 id="3-is-as-as？-as"><a href="#3-is-as-as？-as" class="headerlink" title="3.is as as？ as!"></a>3.is as as？ as!</h3><ul>
<li>is来检查一个实例是否特定子类别</li>
<li>as 用作向上转型（upcast）</li>
<li>as? 可选形式的型別检查总是返回一个（optional value），并且如果向下转是不可能的，可选值将是 nil 。这使你能够检查向下转型是否成功。ps:成功的话返回可选类型值（optional），需要我们拆包使用。（见下方代码）</li>
<li>as! 只有你可以确定向下转型一定会成功时，才使用强制形式。当你视图向下转型为一个不正確的类型时，强制形式的类型检查会引发一个执行时错误。</li>
</ul>
<h3 id="TIP-以上是对容易疑惑的知识点一个简练式的梳理，并未做详细深入表述。"><a href="#TIP-以上是对容易疑惑的知识点一个简练式的梳理，并未做详细深入表述。" class="headerlink" title="TIP:以上是对容易疑惑的知识点一个简练式的梳理，并未做详细深入表述。"></a>TIP:以上是对容易疑惑的知识点一个简练式的梳理，并未做详细深入表述。</h3><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.gitbook.com/book/tommy60703/swift-language-traditional-chinese/details" target="_blank" rel="external">@《The Sw­ift Pr­ogramm­ing La­nguage­》正體中文版</a></p>
<p><a href="http://swifter.tips/implicitly-optional/" target="_blank" rel="external">@隐式解包 OPTIONAL</a></p>
<p><strong>原创文章，版权所有，转载请注明出处</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;最近有朋友咨询过多次关于swift中? ! ?? as? as! Any AnyObject这些符号到底表示什么意思，如何使用。对于初学者，在看swift代码时，对满屏的这些符号，表示很晕。借此机会，我把自己对此的理解记录于此。&lt;/p&gt;
&lt;p&gt;话说一切要先以可选类型Optional说起~~&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>适配Xcode8和iOS10</title>
    <link href="http://yoursite.com/2016/09/19/%E9%80%82%E9%85%8DXcode8%E5%92%8CiOS10/"/>
    <id>http://yoursite.com/2016/09/19/适配Xcode8和iOS10/</id>
    <published>2016-09-19T10:33:58.000Z</published>
    <updated>2016-09-19T10:41:54.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>[亲自整理]Mac上搭建基于GitHub Page的Hexo博客</title>
    <link href="http://yoursite.com/2016/09/12/%E4%BA%B2%E8%87%AA%E6%95%B4%E7%90%86-Mac%E4%B8%8A%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8EGitHub-Page%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2016/09/12/亲自整理-Mac上搭建基于GitHub-Page的Hexo博客/</id>
    <published>2016-09-12T09:09:10.000Z</published>
    <updated>2016-11-02T03:48:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>写作，我认为是一件很有意义的事情。有一个地方，可以记录自己的所思所想，必是一件妙不可言的事情。</p>
<p>作为一个技术男，喜欢捣腾，是一个必备的属性吧。用惯了世面上的博客平台之后，何不搭建一个独立的个人博客。目前搭建独立的个人博客有很多种方式，你可以选择购买主机搭建动态博客 - WordPress等，也可以使用Github Pages来搭建一个静态的个人博客。我选择了现在很热门的Github Pages + Hexo 的方式来搭建独立的个人博客。</p>
<p>以下教程，亲自试验，绝对可用。<br><a id="more"></a></p>
<h1 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h1><h2 id="一-搭建Git环境"><a href="#一-搭建Git环境" class="headerlink" title="一:搭建Git环境"></a>一:搭建Git环境</h2><p>登录你的Github帐号，新建仓库，名为用户名.github.io固定写法，如yituwangpeng.github.io</p>
<h2 id="二-安装Hexo"><a href="#二-安装Hexo" class="headerlink" title="二:安装Hexo"></a>二:安装Hexo</h2><h3 id="2-1安装前提"><a href="#2-1安装前提" class="headerlink" title="2.1安装前提"></a>2.1安装前提</h3><p>要使用Hexo，需要在你的系统中支持Nodejs以及Git。</p>
<ul>
<li><p>Git：Mac自带，无需安装。</p>
</li>
<li><p>Nodejs：安装<a href="https://nodejs.org/en/" target="_blank" rel="external">Nodejs</a> ，请进入Node.js 的官网下载安装。</p>
</li>
</ul>
<h3 id="2-2安装Hexo"><a href="#2-2安装Hexo" class="headerlink" title="2.2安装Hexo"></a>2.2安装Hexo</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo npm install -g hexo-cli</div></pre></td></tr></table></figure>
<p>注意坑一：Hexo官网上的安装命令是$ npm install -g hexo-cli，安装时不要忘记前面加上sudo，否则会因为权限问题报错。</p>
<h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>终端cd到一个你选定的目录，执行hexo init命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init blog</div></pre></td></tr></table></figure>
<p>blog是你建立的文件夹名称。cd到blog文件夹下，执行如下命令，安装npm：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install</div></pre></td></tr></table></figure>
<p>一旦安装之后，blog文件夹下的文件内容有</p>
<ol>
<li>_config.yml    </li>
<li>db.json </li>
<li>node_modules </li>
<li>package.json</li>
<li>scaffolds</li>
<li>source</li>
<li>themes</li>
</ol>
<p>此时，浏览器中打开网址<a href="http://localhost:4000，能看到如下页面,一篇内置的blog" target="_blank" rel="external">http://localhost:4000，能看到如下页面,一篇内置的blog</a></p>
<p><img src="https://raw.githubusercontent.com/jeasonstudio/images/8b550fd8d102bf7625f47511b35489612626636d/20160526/hexo4000.png" alt="Mou icon"></p>
<h3 id="2-3关联Github"><a href="#2-3关联Github" class="headerlink" title="2.3关联Github"></a>2.3关联Github</h3><p>终端cd到blog文件夹下，vim打开_config.yml，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vim _config.yml</div></pre></td></tr></table></figure>
<p>打开后往下滑到最后，修改成下边的样子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">    type: git</div><div class="line">    repository: https://github.com/yituwangpeng/yituwangpeng.github.io.git</div><div class="line">   branch: master</div></pre></td></tr></table></figure>
<p>注意坑二：在配置所有的_config.yml文件时（包括theme中的），在所有的冒号:后边都要加一个空格，否则执行hexo命令会报错，切记 切记</p>
<p>在blog文件夹目录下按顺序执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hero generate</div><div class="line">$ hero deploy</div></pre></td></tr></table></figure>
<p>此时，浏览器中打开网址<a href="http://yituwangpeng.github.io（将yituwangpeng换成你的用户名）能看到和打开http://localhost:4000时一样的页面。" target="_blank" rel="external">http://yituwangpeng.github.io（将yituwangpeng换成你的用户名）能看到和打开http://localhost:4000时一样的页面。</a></p>
<h4 id="–到此准备工作基本做完。"><a href="#–到此准备工作基本做完。" class="headerlink" title="–到此准备工作基本做完。"></a>–到此准备工作基本做完。</h4><h2 id="三-发布文章"><a href="#三-发布文章" class="headerlink" title="三:发布文章"></a>三:发布文章</h2><p>终端cd到blog文件夹下，执行如下命令新建文章：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new &quot;MyFirstBlog&quot;</div></pre></td></tr></table></figure>
<p>名为MyFirstBlog.md的文件会建在目录/blog/source/_posts下。你可以用任何一款Mardown编辑器来写文章。在这里我推荐使用<a href="http://25.io/mou/" target="_blank" rel="external">Mou</a></p>
<p>编写完成之后执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hero generate</div><div class="line">$ hero deploy</div></pre></td></tr></table></figure>
<p>即可完成blog的部署</p>
<h2 id="四-Hexo的主题配置"><a href="#四-Hexo的主题配置" class="headerlink" title="四:Hexo的主题配置"></a>四:Hexo的主题配置</h2><p>Hexo拥有多种主题可以选择配置，详细配置可看Hexo<a href="https://hexo.io/zh-cn/docs/themes.html" target="_blank" rel="external">传送门</a></p>
<p>我使用的主题是Next <a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">传送门</a></p>
<h2 id="五-小结"><a href="#五-小结" class="headerlink" title="五:小结"></a>五:小结</h2><p>本文简单的记录了我搭建hexo博客的过程，内容有些简单。默认前提是Github经常使用，所以对Github部分没有详细介绍。</p>
<p>关于如何绑定自己的域名，会在下片文章中指出。</p>
<p><strong>原创文章，版权所有，转载请注明出处</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;写作，我认为是一件很有意义的事情。有一个地方，可以记录自己的所思所想，必是一件妙不可言的事情。&lt;/p&gt;
&lt;p&gt;作为一个技术男，喜欢捣腾，是一个必备的属性吧。用惯了世面上的博客平台之后，何不搭建一个独立的个人博客。目前搭建独立的个人博客有很多种方式，你可以选择购买主机搭建动态博客 - WordPress等，也可以使用Github Pages来搭建一个静态的个人博客。我选择了现在很热门的Github Pages + Hexo 的方式来搭建独立的个人博客。&lt;/p&gt;
&lt;p&gt;以下教程，亲自试验，绝对可用。&lt;br&gt;
    
    </summary>
    
    
      <category term="Mac" scheme="http://yoursite.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/09/12/hello-world/"/>
    <id>http://yoursite.com/2016/09/12/hello-world/</id>
    <published>2016-09-12T08:21:59.000Z</published>
    <updated>2016-11-01T08:22:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a>
<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
